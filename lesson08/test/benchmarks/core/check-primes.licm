@main(n.0: int) {
.main.b0:
  n.1: int = id n.0;
.main.b1:
  v2.0: int = const 1;
  i.0: int = id v2.0;
  v4.1: int = id n.1;
.for.cond.1:
  v9.0: int = phi v9.2 .endif.7;
  v8.0: bool = phi v8.1 .endif.7;
  v6.0: int = phi v6.1 .endif.7;
  v5.0: bool = phi v5.1 .endif.7;
  v4.0: int = phi v4.1 .endif.7;
  v3.0: int = phi v3.1 .endif.7;
  v15.0: int = phi v15.1 .endif.7;
  v14.0: int = phi v14.1 .endif.7;
  v13.0: int = phi v13.1 .endif.7;
  v12.0: int = phi v12.2 .endif.7;
  v11.0: int = phi v11.2 .endif.7;
  v10.0: int = phi v10.2 .endif.7;
  isPrime.0: bool = phi isPrime.2 .endif.7;
  i.1: int = phi i.0 i.2 .main.b1 .endif.7;
  v3.1: int = id i.1;
  v5.1: bool = lt v3.1 v4.1;
  br v5.1 .for.body.1 .for.end.1;
.for.body.1:
  v6.1: int = id i.1;
  isPrime.1: bool = call @checkPrime v6.1;
  isPrime.2: bool = id isPrime.1;
  v8.1: bool = id isPrime.2;
  br v8.1 .then.7 .else.7;
.then.7:
  v9.1: int = const 1;
  print v9.1;
  v10.1: int = const 0;
  jmp .endif.7;
.else.7:
  v11.1: int = const 0;
  print v11.1;
  v12.1: int = const 0;
.endif.7:
  v9.2: int = phi v9.1 v9.0 .then.7 .else.7;
  v12.2: int = phi v12.0 v12.1 .then.7 .else.7;
  v11.2: int = phi v11.0 v11.1 .then.7 .else.7;
  v10.2: int = phi v10.1 v10.0 .then.7 .else.7;
  v13.1: int = id i.1;
  v14.1: int = const 1;
  v15.1: int = add v13.1 v14.1;
  i.2: int = id v15.1;
  jmp .for.cond.1;
.for.end.1:
}
@checkPrime(x.0: int): bool {
.checkPrime.b0:
  x.1: int = id x.0;
.checkPrime.b1:
  v1.0: int = id x.1;
  v2.0: int = const 1;
  v3.0: bool = le v1.0 v2.0;
  br v3.0 .then.0 .else.0;
.then.0:
  v4.0: bool = const false;
  ret v4.0;
.else.0:
.endif.0:
  v6.0: int = const 2;
  i.0: int = id v6.0;
  v8.1: int = id x.1;
  v10.1: int = id x.1;
  v16.1: int = id x.1;
.for.cond.5:
  v9.0: bool = phi v9.1 .endif.18;
  v8.0: int = phi v8.1 .endif.18;
  v7.0: int = phi v7.1 .endif.18;
  v23.0: int = phi v23.1 .endif.18;
  v22.0: int = phi v22.1 .endif.18;
  v21.0: int = phi v21.1 .endif.18;
  v19.0: bool = phi v19.1 .endif.18;
  v17.0: bool = phi v17.1 .endif.18;
  v16.0: int = phi v16.1 .endif.18;
  v15.0: int = phi v15.1 .endif.18;
  v14.0: int = phi v14.1 .endif.18;
  v13.0: int = phi v13.1 .endif.18;
  v12.0: int = phi v12.1 .endif.18;
  v11.0: int = phi v11.1 .endif.18;
  v10.0: int = phi v10.1 .endif.18;
  isDivisible.0: bool = phi isDivisible.1 .endif.18;
  i.1: int = phi i.0 i.2 .endif.0 .endif.18;
  div.0: int = phi div.1 .endif.18;
  v7.1: int = id i.1;
  v9.1: bool = lt v7.1 v8.1;
  br v9.1 .for.body.5 .for.end.5;
.for.body.5:
  v11.1: int = id i.1;
  v12.1: int = div v10.1 v11.1;
  div.1: int = id v12.1;
  v13.1: int = id div.1;
  v14.1: int = id i.1;
  v15.1: int = mul v13.1 v14.1;
  v17.1: bool = eq v15.1 v16.1;
  isDivisible.1: bool = id v17.1;
  v19.1: bool = id isDivisible.1;
  br v19.1 .then.18 .else.18;
.then.18:
  v20.0: bool = const false;
  ret v20.0;
.else.18:
.endif.18:
  v21.1: int = id i.1;
  v22.1: int = const 1;
  v23.1: int = add v21.1 v22.1;
  i.2: int = id v23.1;
  jmp .for.cond.5;
.for.end.5:
  v24.0: bool = const true;
  ret v24.0;
}
