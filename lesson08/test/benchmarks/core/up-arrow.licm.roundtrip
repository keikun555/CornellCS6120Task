@main(n.0: int, arrows.0: int, repeats.0: int) {
.main.b0:
  n.1: int = id n.0;
  arrows.1: int = id arrows.0;
  repeats.1: int = id repeats.0;
.main.b1:
  ans.0: int = call @up_arrow n.1 arrows.1 repeats.1;
  print ans.0;
}
@up_arrow(num.0: int, arrows.0: int, repeats.0: int): int {
.up_arrow.b0:
  num.1: int = id num.0;
  arrows.1: int = id arrows.0;
  repeats.1: int = id repeats.0;
.up_arrow.b1:
  one.0: int = const 1;
  ans.0: int = id num.1;
  i.0: int = const 1;
  base_case.1: bool = le arrows.1 one.0;
  new_arrows.1: int = sub arrows.1 one.0;
  new_arrows.0: int = const 0;
  keepgoing.0: bool = const false;
  i.1: int = id i.0;
  base_case.0: bool = const false;
  ans.1: int = id ans.0;
.loopstart:
  keepgoing.1: bool = lt i.1 repeats.1;
  br keepgoing.1 .loopbody .endloop;
.loopbody:
  br base_case.1 .base .arrowsgreaterthan1;
.base:
  ans.2: int = mul ans.1 num.1;
  new_arrows.2: int = id new_arrows.0;
  ans.4: int = id ans.2;
  jmp .finally;
.arrowsgreaterthan1:
  ans.3: int = call @up_arrow num.1 new_arrows.1 ans.1;
  new_arrows.2: int = id new_arrows.1;
  ans.4: int = id ans.3;
.finally:
  i.2: int = add i.1 one.0;
  new_arrows.0: int = id new_arrows.2;
  keepgoing.0: bool = id keepgoing.1;
  i.1: int = id i.2;
  base_case.0: bool = id base_case.1;
  ans.1: int = id ans.4;
  jmp .loopstart;
.endloop:
  ret ans.1;
}
