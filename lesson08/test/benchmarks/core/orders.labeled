@abs(a: int): int {
.abs.b0:
  zero: int = const 0;
  is_neg: bool = lt a zero;
  br is_neg .mul_neg_one .abs_res;
.mul_neg_one:
  neg_one: int = const -1;
  a: int = mul a neg_one;
.abs_res:
  ret a;
}
@mod(a: int, b: int): int {
.mod.b0:
  q: int = div a b;
  aq: int = mul b q;
  mod: int = sub a aq;
  ret mod;
}
@gcd(a: int, b: int): int {
.while.cond:
  mod: int = call @mod a b;
  zero: int = const 0;
  is_term: bool = eq mod zero;
  br is_term .while.finish .while.body;
.while.body:
  a: int = id b;
  b: int = id mod;
  jmp .while.cond;
.while.finish:
  ret b;
}
@lcm(a: int, b: int): int {
.lcm.b0:
  zero: int = const 0;
  a_is_zero: bool = eq a zero;
  br a_is_zero .check_b .is_good;
.check_b:
  b_is_zero: bool = eq b zero;
  br b_is_zero .special_case .is_good;
.special_case:
  ret zero;
.is_good:
  ab: int = mul a b;
  ab: int = call @abs ab;
  gcdab: int = call @gcd a b;
  lcm: int = div ab gcdab;
  ret lcm;
}
@orders(u: int, n: int, use_lcm: bool) {
.for.cond:
  is_term: bool = eq u n;
  br is_term .for.finish .for.body;
.for.body:
  br use_lcm .lcm .gcd;
.lcm:
  lcm: int = call @lcm u n;
  ordu: int = div lcm u;
  jmp .for.body.print;
.gcd:
  gcdun: int = call @gcd u n;
  ordu: int = div n gcdun;
.for.body.print:
  print u ordu;
  one: int = const 1;
  u: int = add u one;
  jmp .for.cond;
.for.finish:
  ret;
}
@main(n: int, use_lcm: bool) {
.main.b0:
  zero: int = const 0;
  u: int = const 1;
  n: int = call @abs n;
  print zero u;
  call @orders u n use_lcm;
}
