@main {
.main.b0:
  size.0: int = const 512;
  arr.0: ptr<int> = alloc size.0;
  call @fill_array arr.0 size.0;
  checksum.0: int = call @adler32 arr.0 size.0;
  print checksum.0;
  free arr.0;
}
@mod(r.0: int, s.0: int): int {
.mod.b0:
  r.1: int = id r.0;
  s.1: int = id s.0;
.mod.b1:
  x.0: int = div r.1 s.1;
  y.0: int = mul x.0 s.1;
  result.0: int = sub r.1 y.0;
  ret result.0;
}
@fill_array(arr.0: ptr<int>, size.0: int) {
.fill_array.b0:
  arr.1: ptr<int> = id arr.0;
  size.1: int = id size.0;
.fill_array.b1:
  one.0: int = const 1;
  curr.0: int = const 0;
  loc.0: ptr<int> = id arr.1;
.loop:
  loc.1: ptr<int> = phi loc.0 loc.2 .fill_array.b1 .loop;
  curr.1: int = phi curr.0 curr.2 .fill_array.b1 .loop;
  continue.0: bool = phi continue.1 .loop;
  store loc.1 curr.1;
  loc.2: ptr<int> = ptradd loc.1 one.0;
  curr.2: int = add curr.1 one.0;
  continue.1: bool = lt curr.2 size.1;
  br continue.1 .loop .exit;
.exit:
  nop;
}
@bitwise_or(x.0: int, y.0: int): int {
.bitwise_or.b0:
  x.1: int = id x.0;
  y.1: int = id y.0;
.bitwise_or.b1:
  one.0: int = const 1;
  two.0: int = const 2;
  val.0: int = const 1;
  zero.0: int = const 0;
  result.0: int = const 0;
.loop:
  ypos.0: bool = phi ypos.1 .false;
  yodd.0: bool = phi yodd.1 .false;
  ymod2.0: int = phi ymod2.1 .false;
  y.2: int = phi y.1 y.3 .bitwise_or.b1 .false;
  xpos.0: bool = phi xpos.1 .false;
  xodd.0: bool = phi xodd.1 .false;
  xmod2.0: int = phi xmod2.1 .false;
  x.2: int = phi x.1 x.3 .bitwise_or.b1 .false;
  val.1: int = phi val.0 val.2 .bitwise_or.b1 .false;
  result.1: int = phi result.0 result.3 .bitwise_or.b1 .false;
  continue.0: bool = phi continue.1 .false;
  cond.0: bool = phi cond.1 .false;
  xmod2.1: int = call @mod x.2 two.0;
  ymod2.1: int = call @mod y.2 two.0;
  xodd.1: bool = eq xmod2.1 one.0;
  yodd.1: bool = eq ymod2.1 one.0;
  cond.1: bool = or xodd.1 yodd.1;
  br cond.1 .true .false;
.true:
  result.2: int = add result.1 val.1;
.false:
  result.3: int = phi result.1 result.2 .loop .true;
  x.3: int = div x.2 two.0;
  y.3: int = div y.2 two.0;
  xpos.1: bool = gt x.3 zero.0;
  ypos.1: bool = gt y.3 zero.0;
  val.2: int = mul val.1 two.0;
  continue.1: bool = or xpos.1 ypos.1;
  br continue.1 .loop .exit;
.exit:
  ret result.3;
}
@adler32(arr.0: ptr<int>, size.0: int): int {
.adler32.b0:
  arr.1: ptr<int> = id arr.0;
  size.1: int = id size.0;
.adler32.b1:
  a.0: int = const 1;
  b.0: int = const 0;
  one.0: int = const 1;
  curr.0: int = const 0;
  loc.0: ptr<int> = id arr.1;
  adler.0: int = const 65521;
  two_raised_to_16.0: int = const 65536;
.loop:
  val.0: int = phi val.1 .loop;
  loc.1: ptr<int> = phi loc.0 loc.2 .adler32.b1 .loop;
  curr.1: int = phi curr.0 curr.2 .adler32.b1 .loop;
  continue.0: bool = phi continue.1 .loop;
  b.1: int = phi b.0 b.2 .adler32.b1 .loop;
  a.1: int = phi a.0 a.2 .adler32.b1 .loop;
  val.1: int = load loc.1;
  a.2: int = add a.1 val.1;
  b.2: int = add b.1 a.2;
  loc.2: ptr<int> = ptradd loc.1 one.0;
  curr.2: int = add curr.1 one.0;
  continue.1: bool = lt curr.2 size.1;
  br continue.1 .loop .exit;
.exit:
  a.3: int = call @mod a.2 adler.0;
  b.3: int = call @mod b.2 adler.0;
  b.4: int = mul b.3 two_raised_to_16.0;
  result.0: int = call @bitwise_or b.4 a.3;
  ret result.0;
}
