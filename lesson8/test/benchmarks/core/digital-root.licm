@main(input.0: int) {
.main.b0:
  input.1: int = id input.0;
.main.b1:
  zero.0: int = const 0;
  ten.0: int = const 10;
  result.0: int = const 0;
.begin:
  result.1: int = phi result.0 result.3 .main.b1 .check_done;
  r0.0: int = phi r0.1 .check_done;
  processed.0: bool = phi processed.2 .check_done;
  input.2: int = phi input.1 input.3 .main.b1 .check_done;
  done.0: bool = phi done.1 .check_done;
  digit.0: int = phi digit.1 .check_done;
  digit.1: int = call @peel_last_digit input.2;
  input.3: int = div input.2 ten.0;
  result.2: int = add result.1 digit.1;
.check_result:
  result.3: int = phi result.2 result.5 .begin .process_result;
  r0.1: int = phi r0.0 r0.2 .begin .process_result;
  processed.1: bool = phi processed.0 processed.2 .begin .process_result;
  print result.3;
  processed.2: bool = call @is_single_digit result.3;
  br processed.2 .check_done .process_result;
.process_result:
  r0.2: int = call @peel_last_digit result.3;
  result.4: int = div result.3 ten.0;
  result.5: int = add result.4 r0.2;
  jmp .check_result;
.check_done:
  done.1: bool = eq input.3 zero.0;
  br done.1 .done .begin;
.done:
  print result.3;
}
@is_single_digit(input.0: int): bool {
.is_single_digit.b0:
  input.1: int = id input.0;
.is_single_digit.b1:
  ten.0: int = const 10;
  zero.0: int = const 0;
  divided.0: int = div input.1 ten.0;
  mul_by_ten.0: int = mul divided.0 ten.0;
  result.0: bool = eq mul_by_ten.0 zero.0;
  ret result.0;
}
@peel_last_digit(input.0: int): int {
.peel_last_digit.b0:
  input.1: int = id input.0;
.peel_last_digit.b1:
  ten.0: int = const 10;
  div_by_ten.0: int = div input.1 ten.0;
  mul_by_ten.0: int = mul div_by_ten.0 ten.0;
  last_digit.0: int = sub input.1 mul_by_ten.0;
  ret last_digit.0;
}
