@main {
.main.b0:
  v0.0: int = const 20;
  a.0: int = id v0.0;
  v1.0: int = id a.0;
  call @relative_primes v1.0;
  v2.0: int = const 0;
}
@mod(a.0: int, b.0: int): int {
.mod.b0:
  a.1: int = id a.0;
  b.1: int = id b.0;
.mod.b1:
  v0.0: int = id a.1;
  v1.0: int = id b.1;
  v2.0: int = div v0.0 v1.0;
  v3.0: int = mul v2.0 v1.0;
  v4.0: int = sub v0.0 v3.0;
  ret v4.0;
}
@gcd(a.0: int, b.0: int): int {
.gcd.b0:
  a.1: int = id a.0;
  b.1: int = id b.0;
.gcd.b1:
  v1.0: int = id b.1;
  v2.0: int = id a.1;
  v3.0: bool = gt v1.0 v2.0;
  br v3.0 .then.0 .else.0;
.then.0:
  v4.0: int = id a.1;
  tmp.0: int = id v4.0;
  v5.0: int = id b.1;
  a.2: int = id v5.0;
  v6.0: int = id tmp.0;
  b.2: int = id v6.0;
  jmp .endif.0;
.else.0:
.endif.0:
  v6.1: int = phi v6.0 .then.0;
  v5.1: int = phi v5.0 .then.0;
  v4.1: int = phi v4.0 .then.0;
  tmp.1: int = phi tmp.0 .then.0;
  b.3: int = phi b.2 b.1 .then.0 .else.0;
  a.3: int = phi a.2 a.1 .then.0 .else.0;
  v8.0: int = id a.3;
  v9.0: int = const 0;
  v10.0: bool = eq v8.0 v9.0;
  br v10.0 .then.7 .else.7;
.then.7:
  v11.0: int = id b.3;
  ret v11.0;
.gcd.b2:
  jmp .endif.7;
.else.7:
  v13.0: int = id b.3;
  v14.0: int = const 0;
  v15.0: bool = eq v13.0 v14.0;
  br v15.0 .then.12 .else.12;
.then.12:
  v16.0: int = id a.3;
  ret v16.0;
.gcd.b3:
  jmp .endif.12;
.else.12:
.endif.12:
  v6.2: int = phi v6.1 .else.12;
  v5.2: int = phi v5.1 .else.12;
  v4.2: int = phi v4.1 .else.12;
  v21.0: int = phi;
  v20.0: int = phi;
  v19.0: int = phi;
  v18.0: int = phi;
  v17.0: int = phi;
  v16.1: int = phi;
  v11.1: int = phi;
  tmp.2: int = phi tmp.1 .else.12;
  remainder.0: int = phi;
  g.0: int = phi;
  b.4: int = phi b.3 .else.12;
  a.4: int = phi a.3 .else.12;
.endif.7:
  v6.3: int = phi v6.2 .endif.12;
  v5.3: int = phi v5.2 .endif.12;
  v4.3: int = phi v4.2 .endif.12;
  v21.1: int = phi v21.0 .endif.12;
  v20.1: int = phi v20.0 .endif.12;
  v19.1: int = phi v19.0 .endif.12;
  v18.1: int = phi v18.0 .endif.12;
  v17.1: int = phi v17.0 .endif.12;
  v16.2: int = phi v16.1 .endif.12;
  v11.2: int = phi v11.1 .endif.12;
  tmp.3: int = phi tmp.2 .endif.12;
  remainder.1: int = phi remainder.0 .endif.12;
  g.1: int = phi g.0 .endif.12;
  b.5: int = phi b.4 .endif.12;
  a.5: int = phi a.4 .endif.12;
  v17.2: int = id a.5;
  v18.2: int = id b.5;
  remainder.2: int = call @mod v17.2 v18.2;
  remainder.3: int = id remainder.2;
  v19.2: int = id b.5;
  v20.2: int = id remainder.3;
  g.2: int = call @gcd v19.2 v20.2;
  g.3: int = id g.2;
  v21.2: int = id g.3;
  ret v21.2;
}
@relative_primes(a.0: int) {
.relative_primes.b0:
  a.1: int = id a.0;
.relative_primes.b1:
  v1.0: int = id a.1;
  b.0: int = id v1.0;
.for.cond.0:
  v9.0: int = phi v9.1 .endif.7;
  v8.0: int = phi v8.1 .endif.7;
  v6.0: int = phi v6.1 .endif.7;
  v5.0: int = phi v5.1 .endif.7;
  v4.0: bool = phi v4.1 .endif.7;
  v3.0: int = phi v3.1 .endif.7;
  v2.0: int = phi v2.1 .endif.7;
  v15.0: int = phi v15.1 .endif.7;
  v14.0: int = phi v14.1 .endif.7;
  v13.0: int = phi v13.1 .endif.7;
  v12.0: int = phi v12.2 .endif.7;
  v11.0: int = phi v11.2 .endif.7;
  v10.0: bool = phi v10.1 .endif.7;
  g.0: int = phi g.2 .endif.7;
  b.1: int = phi b.0 b.2 .relative_primes.b1 .endif.7;
  v2.1: int = id b.1;
  v3.1: int = const 1;
  v4.1: bool = ge v2.1 v3.1;
  br v4.1 .for.body.0 .for.end.0;
.for.body.0:
  v5.1: int = id a.1;
  v6.1: int = id b.1;
  g.1: int = call @gcd v5.1 v6.1;
  g.2: int = id g.1;
  v8.1: int = id g.2;
  v9.1: int = const 1;
  v10.1: bool = eq v8.1 v9.1;
  br v10.1 .then.7 .else.7;
.then.7:
  v11.1: int = id b.1;
  print v11.1;
  v12.1: int = const 0;
  jmp .endif.7;
.else.7:
.endif.7:
  v12.2: int = phi v12.1 v12.0 .then.7 .else.7;
  v11.2: int = phi v11.1 v11.0 .then.7 .else.7;
  v13.1: int = id b.1;
  v14.1: int = const 1;
  v15.1: int = sub v13.1 v14.1;
  b.2: int = id v15.1;
  jmp .for.cond.0;
.for.end.0:
}
