@main {
.main.b0:
  a.0: float = const 2.0;
  b.0: float = const 10.0;
  n.0: float = const 8.0;
  left.0: float = call @left_riemann a.0 b.0 n.0;
  print left.0;
  midpoint.0: float = call @midpoint_riemann a.0 b.0 n.0;
  print midpoint.0;
  right.0: float = call @right_riemann a.0 b.0 n.0;
  print right.0;
}
@square_function(x.0: float): float {
.square_function.b0:
  x.1: float = id x.0;
.square_function.b1:
  square.0: float = fmul x.1 x.1;
  ret square.0;
}
@left_riemann(a.0: float, b.0: float, n.0: float): float {
.left_riemann.b0:
  a.1: float = id a.0;
  b.1: float = id b.0;
  n.1: float = id n.0;
.left_riemann.b1:
  zero.0: float = const 0.0;
  one.0: float = const 1.0;
  negative_one.0: float = fsub zero.0 one.0;
  diff.0: float = fsub b.1 a.1;
  delta.0: float = fdiv diff.0 n.1;
  i.0: float = fsub n.1 one.0;
  sum.0: float = const 0.0;
  x.0: float = const 0.0;
  sum.1: float = id sum.0;
  offset.0: float = const 0.0;
  i.1: float = id i.0;
  f_x.0: float = const 0.0;
  cond.0: bool = const false;
.while.header:
  cond.1: bool = feq i.1 negative_one.0;
  br cond.1 .while.end .while.body;
.while.body:
  offset.1: float = fmul delta.0 i.1;
  x.1: float = fadd a.1 offset.1;
  f_x.1: float = call @square_function x.1;
  sum.2: float = fadd sum.1 f_x.1;
  i.2: float = fsub i.1 one.0;
  x.0: float = id x.1;
  sum.1: float = id sum.2;
  offset.0: float = id offset.1;
  i.1: float = id i.2;
  f_x.0: float = id f_x.1;
  cond.0: bool = id cond.1;
  jmp .while.header;
.while.end:
  sum.3: float = fmul sum.1 delta.0;
  ret sum.3;
}
@right_riemann(a.0: float, b.0: float, n.0: float): float {
.right_riemann.b0:
  a.1: float = id a.0;
  b.1: float = id b.0;
  n.1: float = id n.0;
.right_riemann.b1:
  zero.0: float = const 0.0;
  one.0: float = const 1.0;
  diff.0: float = fsub b.1 a.1;
  delta.0: float = fdiv diff.0 n.1;
  i.0: float = id n.1;
  sum.0: float = const 0.0;
  x.0: float = const 0.0;
  sum.1: float = id sum.0;
  offset.0: float = const 0.0;
  i.1: float = id i.0;
  f_x.0: float = const 0.0;
  cond.0: bool = const false;
.while.header:
  cond.1: bool = feq i.1 zero.0;
  br cond.1 .while.end .while.body;
.while.body:
  offset.1: float = fmul delta.0 i.1;
  x.1: float = fadd a.1 offset.1;
  f_x.1: float = call @square_function x.1;
  sum.2: float = fadd sum.1 f_x.1;
  i.2: float = fsub i.1 one.0;
  x.0: float = id x.1;
  sum.1: float = id sum.2;
  offset.0: float = id offset.1;
  i.1: float = id i.2;
  f_x.0: float = id f_x.1;
  cond.0: bool = id cond.1;
  jmp .while.header;
.while.end:
  sum.3: float = fmul sum.1 delta.0;
  ret sum.3;
}
@midpoint_riemann(a.0: float, b.0: float, n.0: float): float {
.midpoint_riemann.b0:
  a.1: float = id a.0;
  b.1: float = id b.0;
  n.1: float = id n.0;
.midpoint_riemann.b1:
  zero.0: float = const 0.0;
  one.0: float = const 1.0;
  negative_one.0: float = fsub zero.0 one.0;
  two.0: float = const 2.0;
  diff.0: float = fsub b.1 a.1;
  delta.0: float = fdiv diff.0 n.1;
  i.0: float = fsub n.1 one.0;
  sum.0: float = const 0.0;
  x.0: float = const 0.0;
  sum.1: float = id sum.0;
  offset.0: float = const 0.0;
  i.1: float = id i.0;
  half_delta.0: float = const 0.0;
  f_x.0: float = const 0.0;
  cond.0: bool = const false;
.while.header:
  cond.1: bool = feq i.1 negative_one.0;
  br cond.1 .while.end .while.body;
.while.body:
  offset.1: float = fmul delta.0 i.1;
  half_delta.1: float = fdiv delta.0 two.0;
  offset.2: float = fadd offset.1 half_delta.1;
  x.1: float = fadd a.1 offset.2;
  f_x.1: float = call @square_function x.1;
  sum.2: float = fadd sum.1 f_x.1;
  i.2: float = fsub i.1 one.0;
  x.0: float = id x.1;
  sum.1: float = id sum.2;
  offset.0: float = id offset.2;
  i.1: float = id i.2;
  half_delta.0: float = id half_delta.1;
  f_x.0: float = id f_x.1;
  cond.0: bool = id cond.1;
  jmp .while.header;
.while.end:
  sum.3: float = fmul sum.1 delta.0;
  ret sum.3;
}
