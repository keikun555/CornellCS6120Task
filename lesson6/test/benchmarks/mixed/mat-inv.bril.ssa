@matget(matrix.0: ptr<float>, r.0: int, c.0: int): float {
.matget.b0:
  matrix.1: ptr<float> = id matrix.0;
  r.1: int = id r.0;
  c.1: int = id c.0;
.matget.b1:
  three.0: int = const 3;
  trip_r.0: int = mul three.0 r.1;
  index.0: int = add c.1 trip_r.0;
  ptr.0: ptr<float> = ptradd matrix.1 index.0;
  res.0: float = load ptr.0;
  ret res.0;
}
@mod(a.0: int, b.0: int): int {
.mod.b0:
  a.1: int = id a.0;
  b.1: int = id b.0;
.mod.b1:
  acc.0: int = div a.1 b.1;
  acc.1: int = mul b.1 acc.0;
  acc.2: int = sub a.1 acc.1;
  ret acc.2;
}
@determinant(matrix.0: ptr<float>): float {
.determinant.b0:
  matrix.1: ptr<float> = id matrix.0;
.determinant.b1:
  two.0: int = const 2;
  one.0: int = const 1;
  zero.0: int = const 0;
  det.0: float = const 0;
  i.0: int = const 0;
  three.0: int = const 3;
.loop:
  to_sub.0: float = phi to_sub.3 .loop;
  to_add.0: float = phi to_add.3 .loop;
  tmp.0: float = phi tmp.4 .loop;
  i_lt_three.0: bool = phi i_lt_three.1 .loop;
  i.1: int = phi i.0 i.2 .determinant.b1 .loop;
  det.1: float = phi det.0 det.3 .determinant.b1 .loop;
  col.0: int = phi col.4 .loop;
  to_add.1: float = call @matget matrix.1 zero.0 i.1;
  to_sub.1: float = id to_add.1;
  col.1: int = add i.1 one.0;
  col.2: int = call @mod col.1 three.0;
  tmp.1: float = call @matget matrix.1 one.0 col.2;
  to_add.2: float = fmul to_add.1 tmp.1;
  tmp.2: float = call @matget matrix.1 two.0 col.2;
  to_sub.2: float = fmul to_sub.1 tmp.2;
  col.3: int = add i.1 two.0;
  col.4: int = call @mod col.3 three.0;
  tmp.3: float = call @matget matrix.1 two.0 col.4;
  to_add.3: float = fmul to_add.2 tmp.3;
  tmp.4: float = call @matget matrix.1 one.0 col.4;
  to_sub.3: float = fmul to_sub.2 tmp.4;
  det.2: float = fadd det.1 to_add.3;
  det.3: float = fsub det.2 to_sub.3;
  i.2: int = add i.1 one.0;
  i_lt_three.1: bool = lt i.2 three.0;
  br i_lt_three.1 .loop .done;
.done:
  ret det.3;
}
@inverse(matrix.0: ptr<float>): ptr<float> {
.inverse.b0:
  matrix.1: ptr<float> = id matrix.0;
.inverse.b1:
  det.0: float = call @determinant matrix.1;
  nine.0: int = const 9;
  result.0: ptr<float> = alloc nine.0;
  zero.0: int = const 0;
  one.0: int = const 1;
  two.0: int = const 2;
  three.0: int = const 3;
  i.0: int = id zero.0;
.outer:
  val.0: float = phi val.5 .continue;
  tmp.0: float = phi tmp.4 .continue;
  temp.0: float = phi temp.2 .continue;
  ptr.0: ptr<float> = phi ptr.2 .continue;
  jp2.0: int = phi jp2.3 .continue;
  jp1.0: int = phi jp1.3 .continue;
  j_lt_three.0: bool = phi j_lt_three.2 .continue;
  j.0: int = phi j.3 .continue;
  ip2.0: int = phi ip2.3 .continue;
  ip1.0: int = phi ip1.3 .continue;
  index.0: int = phi index.3 .continue;
  i_lt_three.0: bool = phi i_lt_three.1 .continue;
  i.1: int = phi i.0 i.2 .inverse.b1 .continue;
  j.1: int = id zero.0;
.inner:
  val.1: float = phi val.0 val.5 .outer .inner;
  tmp.1: float = phi tmp.0 tmp.4 .outer .inner;
  temp.1: float = phi temp.0 temp.2 .outer .inner;
  ptr.1: ptr<float> = phi ptr.0 ptr.2 .outer .inner;
  jp2.1: int = phi jp2.0 jp2.3 .outer .inner;
  jp1.1: int = phi jp1.0 jp1.3 .outer .inner;
  j_lt_three.1: bool = phi j_lt_three.0 j_lt_three.2 .outer .inner;
  j.2: int = phi j.1 j.3 .outer .inner;
  ip2.1: int = phi ip2.0 ip2.3 .outer .inner;
  ip1.1: int = phi ip1.0 ip1.3 .outer .inner;
  index.1: int = phi index.0 index.3 .outer .inner;
  jp1.2: int = add j.2 one.0;
  jp1.3: int = call @mod jp1.2 three.0;
  jp2.2: int = add j.2 two.0;
  jp2.3: int = call @mod jp2.2 three.0;
  ip1.2: int = add i.1 one.0;
  ip1.3: int = call @mod ip1.2 three.0;
  ip2.2: int = add i.1 two.0;
  ip2.3: int = call @mod ip2.2 three.0;
  val.2: float = call @matget matrix.1 jp1.3 ip1.3;
  tmp.2: float = call @matget matrix.1 jp2.3 ip2.3;
  val.3: float = fmul val.2 tmp.2;
  tmp.3: float = call @matget matrix.1 jp1.3 ip2.3;
  temp.2: float = call @matget matrix.1 jp2.3 ip1.3;
  tmp.4: float = fmul tmp.3 temp.2;
  val.4: float = fsub val.3 tmp.4;
  val.5: float = fdiv val.4 det.0;
  index.2: int = mul three.0 i.1;
  index.3: int = add index.2 j.2;
  ptr.2: ptr<float> = ptradd result.0 index.3;
  store ptr.2 val.5;
  j.3: int = add j.2 one.0;
  j_lt_three.2: bool = lt j.3 three.0;
  br j_lt_three.2 .inner .continue;
.continue:
  i.2: int = add i.1 one.0;
  i_lt_three.1: bool = lt i.2 three.0;
  br i_lt_three.1 .outer .finished;
.finished:
  ret result.0;
}
@main {
.main.b0:
  nine.0: int = const 9;
  one.0: int = const 1;
  matrix.0: ptr<float> = alloc nine.0;
  zero.0: float = const 0;
  onef.0: float = const 1;
  three.0: float = const 3;
  four.0: float = const 4;
  five.0: float = const 5;
  seven.0: float = const 7;
  store matrix.0 zero.0;
  ptr.0: ptr<float> = ptradd matrix.0 one.0;
  store ptr.0 onef.0;
  ptr.1: ptr<float> = ptradd ptr.0 one.0;
  store ptr.1 seven.0;
  ptr.2: ptr<float> = ptradd ptr.1 one.0;
  store ptr.2 four.0;
  ptr.3: ptr<float> = ptradd ptr.2 one.0;
  store ptr.3 three.0;
  ptr.4: ptr<float> = ptradd ptr.3 one.0;
  store ptr.4 five.0;
  ptr.5: ptr<float> = ptradd ptr.4 one.0;
  store ptr.5 seven.0;
  ptr.6: ptr<float> = ptradd ptr.5 one.0;
  store ptr.6 four.0;
  ptr.7: ptr<float> = ptradd ptr.6 one.0;
  store ptr.7 five.0;
  det.0: float = call @determinant matrix.0;
  print det.0;
  inv.0: ptr<float> = call @inverse matrix.0;
  call @printarray nine.0 inv.0;
  free inv.0;
  free matrix.0;
}
@printarray(size.0: int, arr.0: ptr<float>) {
.printarray.b0:
  size.1: int = id size.0;
  arr.1: ptr<float> = id arr.0;
.printarray.b1:
  i.0: int = const 0;
  one.0: int = const 1;
.loop:
  val.0: float = phi val.1 .loop_end;
  loc.0: ptr<float> = phi loc.1 .loop_end;
  i.1: int = phi i.0 i.2 .printarray.b1 .loop_end;
  cond.0: bool = phi cond.1 .loop_end;
  cond.1: bool = lt i.1 size.1;
  br cond.1 .body .done;
.body:
  loc.1: ptr<float> = ptradd arr.1 i.1;
  val.1: float = load loc.1;
  print val.1;
.loop_end:
  i.2: int = add i.1 one.0;
  jmp .loop;
.done:
  ret;
}
