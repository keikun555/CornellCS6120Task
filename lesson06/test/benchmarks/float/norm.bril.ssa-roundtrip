@pow(x.0: float, k.0: int): float {
.pow.b0:
  x.1: float = id x.0;
  k.1: int = id k.0;
.pow.b1:
  xx.0: float = const 1.0;
  one.0: int = const 1;
  i.0: int = const 0;
  xx.1: float = id xx.0;
  i.1: int = id i.0;
  b.0: bool = const false;
.while:
  b.1: bool = lt i.1 k.1;
  br b.1 .continue .endwhile;
.continue:
  xx.2: float = fmul xx.1 x.1;
  i.2: int = add i.1 one.0;
  xx.1: float = id xx.2;
  i.1: int = id i.2;
  b.0: bool = id b.1;
  jmp .while;
.endwhile:
  ret xx.1;
}
@n_root(x.0: float, n.0: int): float {
.n_root.b0:
  x.1: float = id x.0;
  n.1: int = id n.0;
.n_root.b1:
  one.0: int = const 1;
  two_f.0: float = const 2.0;
  xxx.0: float = fdiv x.1 two_f.0;
  n_minus_one.0: int = sub n.1 one.0;
  i.0: int = const 0;
  num_iter.0: int = const 20;
  xxx.1: float = id xxx.0;
  pow_n_minus_one.0: float = const 0.0;
  pow_n.0: float = const 0.0;
  numerator.0: float = const 0.0;
  i.1: int = id i.0;
  frac.0: float = const 0.0;
  denominator.0: float = const 0.0;
  b.0: bool = const false;
.while:
  b.1: bool = lt i.1 num_iter.0;
  br b.1 .continue .endwhile;
.continue:
  pow_n_minus_one.1: float = call @pow xxx.1 n_minus_one.0;
  pow_n.1: float = fmul pow_n_minus_one.1 xxx.1;
  numerator.1: float = fsub pow_n.1 x.1;
  denominator.1: float = fmul x.1 pow_n_minus_one.1;
  frac.1: float = fdiv numerator.1 denominator.1;
  xxx.2: float = fsub xxx.1 frac.1;
  i.2: int = add i.1 one.0;
  xxx.1: float = id xxx.2;
  pow_n_minus_one.0: float = id pow_n_minus_one.1;
  pow_n.0: float = id pow_n.1;
  numerator.0: float = id numerator.1;
  i.1: int = id i.2;
  frac.0: float = id frac.1;
  denominator.0: float = id denominator.1;
  b.0: bool = id b.1;
  jmp .while;
.endwhile:
  ret xxx.1;
}
@pack(size.0: int, n1.0: float, n2.0: float, n3.0: float, n4.0: float, n5.0: float): ptr<float> {
.pack.b0:
  size.1: int = id size.0;
  n1.1: float = id n1.0;
  n2.1: float = id n2.0;
  n3.1: float = id n3.0;
  n4.1: float = id n4.0;
  n5.1: float = id n5.0;
.pack.b1:
  one.0: int = const 1;
  i.0: int = const 0;
  array.0: ptr<float> = alloc size.1;
  loc.0: ptr<float> = ptradd array.0 i.0;
  store loc.0 n1.1;
  i.1: int = add i.0 one.0;
  loc.1: ptr<float> = ptradd array.0 i.1;
  store loc.1 n2.1;
  i.2: int = add i.1 one.0;
  loc.2: ptr<float> = ptradd array.0 i.2;
  store loc.2 n3.1;
  i.3: int = add i.2 one.0;
  loc.3: ptr<float> = ptradd array.0 i.3;
  store loc.3 n4.1;
  i.4: int = add i.3 one.0;
  loc.4: ptr<float> = ptradd array.0 i.4;
  store loc.4 n5.1;
  ret array.0;
}
@print_array(array.0: ptr<float>, size.0: int) {
.print_array.b0:
  array.1: ptr<float> = id array.0;
  size.1: int = id size.0;
.print_array.b1:
  i.0: int = const 0;
  one.0: int = const 1;
  val.0: float = const 0.0;
  loc.0.size: int = const 1;
  loc.0: ptr<float> = alloc loc.0.size;
  free loc.0;
  i.1: int = id i.0;
  cond.0: bool = const false;
.loop:
  cond.1: bool = lt i.1 size.1;
  br cond.1 .body .done;
.body:
  loc.1: ptr<float> = ptradd array.1 i.1;
  val.1: float = load loc.1;
  print val.1;
.loop_end:
  i.2: int = add i.1 one.0;
  val.0: float = id val.1;
  loc.0: ptr<float> = id loc.1;
  i.1: int = id i.2;
  cond.0: bool = id cond.1;
  jmp .loop;
.done:
  ret;
}
@euclidean_norm(array.0: ptr<float>, size.0: int): float {
.euclidean_norm.b0:
  array.1: ptr<float> = id array.0;
  size.1: int = id size.0;
.euclidean_norm.b1:
  i.0: int = const 0;
  sum.0: float = const 0.0;
  one.0: int = const 1;
  val.0: float = const 0.0;
  sum.1: float = id sum.0;
  square.0: float = const 0.0;
  loc.0.size: int = const 1;
  loc.0: ptr<float> = alloc loc.0.size;
  free loc.0;
  i.1: int = id i.0;
  cond.0: bool = const false;
.loop:
  cond.1: bool = lt i.1 size.1;
  br cond.1 .body .done;
.body:
  loc.1: ptr<float> = ptradd array.1 i.1;
  val.1: float = load loc.1;
  square.1: float = fmul val.1 val.1;
  sum.2: float = fadd sum.1 square.1;
.loop_end:
  i.2: int = add i.1 one.0;
  val.0: float = id val.1;
  sum.1: float = id sum.2;
  square.0: float = id square.1;
  loc.0: ptr<float> = id loc.1;
  i.1: int = id i.2;
  cond.0: bool = id cond.1;
  jmp .loop;
.done:
  two.0: int = const 2;
  norm.0: float = call @n_root sum.1 two.0;
  ret norm.0;
}
@main {
.main.b0:
  size.0: int = const 5;
  n1.0: float = const 3;
  n2.0: float = const 10;
  n3.0: float = const 1;
  n4.0: float = const 9;
  n5.0: float = const 7;
  array.0: ptr<float> = call @pack size.0 n1.0 n2.0 n3.0 n4.0 n5.0;
  norm.0: float = call @euclidean_norm array.0 size.0;
  print norm.0;
  free array.0;
}
