@main(input.0: int) {
.main.b0:
  input.1: int = id input.0;
.main.b1:
  n.0: int = id input.1;
  v0.0: int = const 0;
  v1.0: int = const 1;
  v2.0: int = const 2;
  sum.0: int = id v1.0;
  i.0: int = id v2.0;
  result.0: int = id v1.0;
.for.cond.1:
  sum.1: int = phi sum.0 sum.4 .main.b1 .for.incre;
  qut.0: int = phi qut.1 .for.incre;
  mpt.0: int = phi mpt.1 .for.incre;
  ii.0: int = phi ii.1 .for.incre;
  i.1: int = phi i.0 i.2 .main.b1 .for.incre;
  dif.0: int = phi dif.1 .for.incre;
  comp1.0: bool = phi comp1.1 .for.incre;
  comp.0: bool = phi comp.1 .for.incre;
  ii.1: int = mul i.1 i.1;
  comp.1: bool = gt ii.1 n.0;
  br comp.1 .for.end .for.body;
.for.body:
  qut.1: int = div n.0 i.1;
  mpt.1: int = mul qut.1 i.1;
  dif.1: int = sub n.0 mpt.1;
  comp1.1: bool = eq dif.1 v0.0;
  br comp1.1 .if.body .for.incre;
.if.body:
  sum.2: int = add sum.1 i.1;
  sum.3: int = add sum.2 qut.1;
.for.incre:
  sum.4: int = phi sum.1 sum.3 .for.body .if.body;
  i.2: int = add i.1 v1.0;
  jmp .for.cond.1;
.for.end:
  comp2.0: bool = eq sum.1 n.0;
  br comp2.0 .if.success .if.failure.end;
.if.success:
  result.2: int = id v0.0;
.if.failure.end:
  result.1: int = phi result.0 result.2 .for.end .if.success;
  print result.1;
}
