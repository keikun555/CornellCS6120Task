@main(input.0: int) {
.main.b0:
  input.1: int = id input.0;
.main.b1:
  zero.0: int = const 0;
  ten.0: int = const 10;
  sum.0: int = const 0;
  digits.0: int = call @getDigits input.1;
  tmp.0: int = id input.1;
  tmp.1: int = id tmp.0;
  sum.1: int = id sum.0;
  pow.0: int = const 0;
  digit.0: int = const 0;
  b.0: bool = const false;
.loop:
  b.1: bool = gt tmp.1 zero.0;
  br b.1 .body .done;
.body:
  digit.1: int = call @mod tmp.1 ten.0;
  pow.1: int = call @power digit.1 digits.0;
  sum.2: int = add sum.1 pow.1;
  tmp.2: int = div tmp.1 ten.0;
  tmp.1: int = id tmp.2;
  sum.1: int = id sum.2;
  pow.0: int = id pow.1;
  digit.0: int = id digit.1;
  b.0: bool = id b.1;
  jmp .loop;
.done:
  res.0: bool = eq input.1 sum.1;
  print res.0;
}
@getDigits(n.0: int): int {
.getDigits.b0:
  n.1: int = id n.0;
.getDigits.b1:
  ten.0: int = const 10;
  zero.0: int = const 0;
  one.0: int = const 1;
  div.0: int = div n.1 ten.0;
  cond.0: bool = eq div.0 zero.0;
  br cond.0 .then .else;
.then:
  ret one.0;
.else:
  rec.0: int = call @getDigits div.0;
  res.0: int = add rec.0 one.0;
  ret res.0;
}
@mod(a.0: int, b.0: int): int {
.mod.b0:
  a.1: int = id a.0;
  b.1: int = id b.0;
.mod.b1:
  q.0: int = div a.1 b.1;
  aq.0: int = mul b.1 q.0;
  mod.0: int = sub a.1 aq.0;
  ret mod.0;
}
@power(base.0: int, exp.0: int): int {
.power.b0:
  base.1: int = id base.0;
  exp.1: int = id exp.0;
.power.b1:
  ten.0: int = const 10;
  zero.0: int = const 0;
  one.0: int = const 1;
  res.0: int = const 1;
  res.1: int = id res.0;
  exp.2: int = id exp.1;
  b.0: bool = const false;
.loop:
  b.1: bool = eq exp.2 zero.0;
  br b.1 .done .body;
.body:
  res.2: int = mul res.1 base.1;
  exp.3: int = sub exp.2 one.0;
  res.1: int = id res.2;
  exp.2: int = id exp.3;
  b.0: bool = id b.1;
  jmp .loop;
.done:
  ret res.1;
}
