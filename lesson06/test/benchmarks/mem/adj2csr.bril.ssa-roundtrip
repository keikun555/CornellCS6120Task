@rand(seq.0: ptr<int>, max.0: int): int {
.rand.b0:
  seq.1: ptr<int> = id seq.0;
  max.1: int = id max.0;
.rand.b1:
  a.0: int = const 25214903917;
  c.0: int = const 11;
  m.0: int = const 281474976710656;
  x.0: int = load seq.1;
  ax.0: int = mul a.0 x.0;
  axpc.0: int = add ax.0 c.0;
  next.0: int = div axpc.0 m.0;
  next.1: int = mul next.0 m.0;
  next.2: int = sub axpc.0 next.1;
  store seq.1 next.2;
  val.0: int = div next.2 max.1;
  val.1: int = mul val.0 max.1;
  val.2: int = sub next.2 val.1;
  ret val.2;
}
@randarray(size.0: int, rng.0: ptr<int>): ptr<int> {
.randarray.b0:
  size.1: int = id size.0;
  rng.1: ptr<int> = id rng.0;
.randarray.b1:
  arr.0: ptr<int> = alloc size.1;
  i.0: int = const 0;
  max.0: int = const 2;
  one.0: int = const 1;
  zero.0: int = const 0;
  val.0: int = const 0;
  loc.0.size: int = const 1;
  loc.0: ptr<int> = alloc loc.0.size;
  free loc.0;
  if_cond.0: bool = const false;
  i.1: int = id i.0;
  cond.0: bool = const false;
.loop:
  cond.1: bool = lt i.1 size.1;
  br cond.1 .body .done;
.body:
  val.1: int = call @rand rng.1 max.0;
  if_cond.1: bool = lt val.1 zero.0;
  val.3: int = id val.1;
  br if_cond.1 .if_body .if_done;
.if_body:
  val.2: int = const 0;
  val.3: int = id val.2;
.if_done:
  loc.1: ptr<int> = ptradd arr.0 i.1;
  store loc.1 val.3;
.loop_end:
  i.2: int = add i.1 one.0;
  val.0: int = id val.3;
  loc.0: ptr<int> = id loc.1;
  if_cond.0: bool = id if_cond.1;
  i.1: int = id i.2;
  cond.0: bool = id cond.1;
  jmp .loop;
.done:
  ret arr.0;
}
@printarray(size.0: int, arr.0: ptr<int>) {
.printarray.b0:
  size.1: int = id size.0;
  arr.1: ptr<int> = id arr.0;
.printarray.b1:
  i.0: int = const 0;
  one.0: int = const 1;
  val.0: int = const 0;
  loc.0.size: int = const 1;
  loc.0: ptr<int> = alloc loc.0.size;
  free loc.0;
  i.1: int = id i.0;
  cond.0: bool = const false;
.loop:
  cond.1: bool = lt i.1 size.1;
  br cond.1 .body .done;
.body:
  loc.1: ptr<int> = ptradd arr.1 i.1;
  val.1: int = load loc.1;
  print val.1;
.loop_end:
  i.2: int = add i.1 one.0;
  val.0: int = id val.1;
  loc.0: ptr<int> = id loc.1;
  i.1: int = id i.2;
  cond.0: bool = id cond.1;
  jmp .loop;
.done:
  ret;
}
@zeroarray(size.0: int): ptr<int> {
.zeroarray.b0:
  size.1: int = id size.0;
.zeroarray.b1:
  arr.0: ptr<int> = alloc size.1;
  i.0: int = const 0;
  zero.0: int = const 0;
  one.0: int = const 1;
  loc.0.size: int = const 1;
  loc.0: ptr<int> = alloc loc.0.size;
  free loc.0;
  i.1: int = id i.0;
  cond.0: bool = const false;
.loop:
  cond.1: bool = lt i.1 size.1;
  br cond.1 .body .done;
.body:
  loc.1: ptr<int> = ptradd arr.0 i.1;
  store loc.1 zero.0;
.loop_end:
  i.2: int = add i.1 one.0;
  loc.0: ptr<int> = id loc.1;
  i.1: int = id i.2;
  cond.0: bool = id cond.1;
  jmp .loop;
.done:
  ret arr.0;
}
@adj2csr(num_nodes.0: int, adjmat.0: ptr<int>, csr_offset.0: ptr<int>, csr_edges.0: ptr<int>): int {
.adj2csr.b0:
  num_nodes.1: int = id num_nodes.0;
  adjmat.1: ptr<int> = id adjmat.0;
  csr_offset.1: ptr<int> = id csr_offset.0;
  csr_edges.1: ptr<int> = id csr_edges.0;
.adj2csr.b1:
  num_edges.0: int = const 0;
  row.0: int = const 0;
  one.0: int = const 1;
  row_tmp.0: int = const 0;
  row_cond.0: bool = const false;
  row.1: int = id row.0;
  offset_loc.0.size: int = const 1;
  offset_loc.0: ptr<int> = alloc offset_loc.0.size;
  free offset_loc.0;
  num_edges.1: int = id num_edges.0;
  node_val.0: int = const 0;
  node_loc.0.size: int = const 1;
  node_loc.0: ptr<int> = alloc node_loc.0.size;
  free node_loc.0;
  node_idx.0: int = const 0;
  edge_loc.0.size: int = const 1;
  edge_loc.0: ptr<int> = alloc edge_loc.0.size;
  free edge_loc.0;
  cond.0: bool = const false;
  col_cond.0: bool = const false;
  col.0: int = const 0;
.iter_row:
  row_cond.1: bool = lt row.1 num_nodes.1;
  col.1: int = const 0;
  row_tmp.1: int = id row_tmp.0;
  num_edges.2: int = id num_edges.1;
  node_val.1: int = id node_val.0;
  node_loc.1: ptr<int> = id node_loc.0;
  node_idx.1: int = id node_idx.0;
  edge_loc.1: ptr<int> = id edge_loc.0;
  cond.1: bool = id cond.0;
  col_cond.1: bool = id col_cond.0;
  col.2: int = id col.1;
  br row_cond.1 .iter_col .row_done;
.iter_col:
  col_cond.2: bool = lt col.2 num_nodes.1;
  br col_cond.2 .col_body .col_done;
.col_body:
  row_tmp.2: int = mul row.1 num_nodes.1;
  node_idx.2: int = add row_tmp.2 col.2;
  node_loc.2: ptr<int> = ptradd adjmat.1 node_idx.2;
  node_val.2: int = load node_loc.2;
  cond.2: bool = eq node_val.2 one.0;
  num_edges.4: int = id num_edges.2;
  edge_loc.3: ptr<int> = id edge_loc.1;
  br cond.2 .if_body .col_end;
.if_body:
  edge_loc.2: ptr<int> = ptradd csr_edges.1 num_edges.2;
  store edge_loc.2 col.2;
  num_edges.3: int = add num_edges.2 one.0;
  num_edges.4: int = id num_edges.3;
  edge_loc.3: ptr<int> = id edge_loc.2;
.col_end:
  col.3: int = add col.2 one.0;
  row_tmp.1: int = id row_tmp.2;
  num_edges.2: int = id num_edges.4;
  node_val.1: int = id node_val.2;
  node_loc.1: ptr<int> = id node_loc.2;
  node_idx.1: int = id node_idx.2;
  edge_loc.1: ptr<int> = id edge_loc.3;
  cond.1: bool = id cond.2;
  col_cond.1: bool = id col_cond.2;
  col.2: int = id col.3;
  jmp .iter_col;
.col_done:
  offset_loc.1: ptr<int> = ptradd csr_offset.1 row.1;
  store offset_loc.1 num_edges.2;
.row_end:
  row.2: int = add row.1 one.0;
  row_tmp.0: int = id row_tmp.1;
  row_cond.0: bool = id row_cond.1;
  row.1: int = id row.2;
  offset_loc.0: ptr<int> = id offset_loc.1;
  num_edges.1: int = id num_edges.2;
  node_val.0: int = id node_val.1;
  node_loc.0: ptr<int> = id node_loc.1;
  node_idx.0: int = id node_idx.1;
  edge_loc.0: ptr<int> = id edge_loc.1;
  cond.0: bool = id cond.1;
  col_cond.0: bool = id col_cond.2;
  col.0: int = id col.2;
  jmp .iter_row;
.row_done:
  ret num_edges.1;
}
@main(num_nodes.0: int, seed.0: int) {
.main.b0:
  num_nodes.1: int = id num_nodes.0;
  seed.1: int = id seed.0;
.main.b1:
  one.0: int = const 1;
  rng.0: ptr<int> = alloc one.0;
  store rng.0 seed.1;
  sqsize.0: int = mul num_nodes.1 num_nodes.1;
  adjmat.0: ptr<int> = call @randarray sqsize.0 rng.0;
  csr_offset.0: ptr<int> = call @zeroarray sqsize.0;
  csr_edges.0: ptr<int> = call @zeroarray sqsize.0;
  num_edges.0: int = call @adj2csr num_nodes.1 adjmat.0 csr_offset.0 csr_edges.0;
  print num_nodes.1;
  print num_edges.0;
  call @printarray sqsize.0 adjmat.0;
  call @printarray num_nodes.1 csr_offset.0;
  call @printarray num_edges.0 csr_edges.0;
  free adjmat.0;
  free csr_offset.0;
  free csr_edges.0;
  free rng.0;
  ret;
}
