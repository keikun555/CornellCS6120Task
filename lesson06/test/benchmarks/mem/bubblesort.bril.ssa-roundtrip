@pack(size.0: int, n1.0: int, n2.0: int, n3.0: int, n4.0: int, n5.0: int): ptr<int> {
.pack.b0:
  size.1: int = id size.0;
  n1.1: int = id n1.0;
  n2.1: int = id n2.0;
  n3.1: int = id n3.0;
  n4.1: int = id n4.0;
  n5.1: int = id n5.0;
.pack.b1:
  one.0: int = const 1;
  i.0: int = const 0;
  array.0: ptr<int> = alloc size.1;
  loc.0: ptr<int> = ptradd array.0 i.0;
  store loc.0 n1.1;
  i.1: int = add i.0 one.0;
  loc.1: ptr<int> = ptradd array.0 i.1;
  store loc.1 n2.1;
  i.2: int = add i.1 one.0;
  loc.2: ptr<int> = ptradd array.0 i.2;
  store loc.2 n3.1;
  i.3: int = add i.2 one.0;
  loc.3: ptr<int> = ptradd array.0 i.3;
  store loc.3 n4.1;
  i.4: int = add i.3 one.0;
  loc.4: ptr<int> = ptradd array.0 i.4;
  store loc.4 n5.1;
  ret array.0;
}
@print_array(array.0: ptr<int>, size.0: int) {
.print_array.b0:
  array.1: ptr<int> = id array.0;
  size.1: int = id size.0;
.print_array.b1:
  i.0: int = const 0;
  one.0: int = const 1;
  val.0: int = const 0;
  loc.0.size: int = const 1;
  loc.0: ptr<int> = alloc loc.0.size;
  free loc.0;
  i.1: int = id i.0;
  cond.0: bool = const false;
.loop:
  cond.1: bool = lt i.1 size.1;
  br cond.1 .body .done;
.body:
  loc.1: ptr<int> = ptradd array.1 i.1;
  val.1: int = load loc.1;
  print val.1;
.loop_end:
  i.2: int = add i.1 one.0;
  val.0: int = id val.1;
  loc.0: ptr<int> = id loc.1;
  i.1: int = id i.2;
  cond.0: bool = id cond.1;
  jmp .loop;
.done:
  ret;
}
@swap_cond(array.0: ptr<int>, j.0: int) {
.swap_cond.b0:
  array.1: ptr<int> = id array.0;
  j.1: int = id j.0;
.swap_cond.b1:
  one.0: int = const 1;
  j_add_1.0: int = add j.1 one.0;
  loc.0: ptr<int> = ptradd array.1 j.1;
  loc_next.0: ptr<int> = ptradd array.1 j_add_1.0;
  elem_a.0: int = load loc.0;
  elem_b.0: int = load loc_next.0;
  cond.0: bool = gt elem_a.0 elem_b.0;
  br cond.0 .swap .done;
.swap:
  store loc.0 elem_b.0;
  store loc_next.0 elem_a.0;
.done:
  ret;
}
@main(size.0: int, n1.0: int, n2.0: int, n3.0: int, n4.0: int, n5.0: int) {
.main.b0:
  size.1: int = id size.0;
  n1.1: int = id n1.0;
  n2.1: int = id n2.0;
  n3.1: int = id n3.0;
  n4.1: int = id n4.0;
  n5.1: int = id n5.0;
.main.b1:
  array.0: ptr<int> = call @pack size.1 n1.1 n2.1 n3.1 n4.1 n5.1;
  one.0: int = const 1;
  i.0: int = const 0;
  j.0: int = const 0;
  sizei.0: int = sub size.1 one.0;
  sizej.0: int = const 0;
  j.1: int = id j.0;
  i.1: int = id i.0;
  condj.0: bool = const false;
  condi.0: bool = const false;
.loopi:
  condi.1: bool = lt i.1 sizei.0;
  br condi.1 .bodyi .donei;
.bodyi:
  sizej.1: int = sub size.1 i.1;
  sizej.2: int = sub sizej.1 one.0;
  j.2: int = id j.1;
  condj.1: bool = id condj.0;
.loopj:
  condj.2: bool = lt j.2 sizej.2;
  br condj.2 .bodyj .donej;
.bodyj:
  call @swap_cond array.0 j.2;
.loop_endj:
  j.3: int = add j.2 one.0;
  j.2: int = id j.3;
  condj.1: bool = id condj.2;
  jmp .loopj;
.donej:
  j.4: int = const 0;
.loopi_end:
  i.2: int = add i.1 one.0;
  sizej.0: int = id sizej.2;
  j.1: int = id j.4;
  i.1: int = id i.2;
  condj.0: bool = id condj.2;
  condi.0: bool = id condi.1;
  jmp .loopi;
.donei:
  call @print_array array.0 size.1;
  free array.0;
}
